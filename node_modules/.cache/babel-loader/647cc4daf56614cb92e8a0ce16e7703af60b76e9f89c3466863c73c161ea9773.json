{"ast":null,"code":"var _jsxFileName = \"/Users/luismedina/Desktop/projects/feature-testing/src/components/Translator.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Translator = originalText => {\n  console.log(hashedEng.get(\"A\"));\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\" \", originalText.text]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n};\n_c = Translator;\nlet hashedEng = new Map();\nlet hashedSaur = new Map();\nconst ENGLISHARR = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '!', ' ', '.', '?', ',', '\\''];\nconst SAURIANARR = ['U', 'R', 'S', 'T', 'O', 'V', 'W', 'X', 'A', 'Z', 'B', 'C', 'M', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'I', 'L', 'N', 'P', 'O', 'Q', 'u', 'r', 's', 't', 'o', 'v', 'w', 'x', 'a', 'z', 'b', 'c', 'm', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'i', 'l', 'n', 'p', 'o', 'q', '!', ' ', '.', '?', ',', '\\''];\nlet i = 0;\nwhile (i < SAURIANARR.length) {\n  hashedEng.set(ENGLISHARR[i], SAURIANARR[i]);\n  hashedSaur.set(SAURIANARR[i], ENGLISHARR[i]);\n  i++;\n}\nconst englishToSaurian = original => {};\nconst saurianToEnglish = original => {};\nexport default Translator;\nvar _c;\n$RefreshReg$(_c, \"Translator\");","map":{"version":3,"names":["Translator","originalText","console","log","hashedEng","get","_jsxDEV","children","text","fileName","_jsxFileName","lineNumber","columnNumber","_c","Map","hashedSaur","ENGLISHARR","SAURIANARR","i","length","set","englishToSaurian","original","saurianToEnglish","$RefreshReg$"],"sources":["/Users/luismedina/Desktop/projects/feature-testing/src/components/Translator.jsx"],"sourcesContent":["\nconst Translator = (originalText) =>{\n\n    console.log(hashedEng.get(\"A\"));\n    \n    return(\n        <p> {originalText.text}</p>\n    )\n\n}\n\nlet hashedEng = new Map();\nlet hashedSaur = new Map();\n\nconst ENGLISHARR = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q',\n    'R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q',\n    'r','s','t','u','v','w','x','y','z','!', ' ','.','?',',','\\''];\n\nconst SAURIANARR = ['U','R','S','T','O','V','W','X','A','Z','B','C','M','D','E','F','G',\n    'H','J','K','I','L','N','P','O','Q','u','r','s','t','o','v','w','x','a','z','b','c','m','d','e','f','g',\n    'h','j','k','i','l','n','p','o','q','!', ' ','.','?',',','\\''];\n\nlet i =0;\nwhile(i< SAURIANARR.length){\n\n    hashedEng.set(ENGLISHARR[i],SAURIANARR[i]);\n    hashedSaur.set(SAURIANARR[i], ENGLISHARR[i]);\n    i++;\n}\n\nconst englishToSaurian = (original) =>{\n\n}\n\nconst saurianToEnglish = (original) =>{\n\n}\n\nexport default Translator;\n\n"],"mappings":";;AACA,MAAMA,UAAU,GAAIC,YAAY,IAAI;EAEhCC,OAAO,CAACC,GAAG,CAACC,SAAS,CAACC,GAAG,CAAC,GAAG,CAAC,CAAC;EAE/B,oBACIC,OAAA;IAAAC,QAAA,GAAG,GAAC,EAACN,YAAY,CAACO,IAAI;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAK;AAGnC,CAAC;AAAAC,EAAA,GARKb,UAAU;AAUhB,IAAII,SAAS,GAAG,IAAIU,GAAG,EAAE;AACzB,IAAIC,UAAU,GAAG,IAAID,GAAG,EAAE;AAE1B,MAAME,UAAU,GAAG,CAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EACnF,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EACvG,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAE,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,IAAI,CAAC;AAElE,MAAMC,UAAU,GAAG,CAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EACnF,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EACvG,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAE,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,IAAI,CAAC;AAElE,IAAIC,CAAC,GAAE,CAAC;AACR,OAAMA,CAAC,GAAED,UAAU,CAACE,MAAM,EAAC;EAEvBf,SAAS,CAACgB,GAAG,CAACJ,UAAU,CAACE,CAAC,CAAC,EAACD,UAAU,CAACC,CAAC,CAAC,CAAC;EAC1CH,UAAU,CAACK,GAAG,CAACH,UAAU,CAACC,CAAC,CAAC,EAAEF,UAAU,CAACE,CAAC,CAAC,CAAC;EAC5CA,CAAC,EAAE;AACP;AAEA,MAAMG,gBAAgB,GAAIC,QAAQ,IAAI,CAEtC,CAAC;AAED,MAAMC,gBAAgB,GAAID,QAAQ,IAAI,CAEtC,CAAC;AAED,eAAetB,UAAU;AAAC,IAAAa,EAAA;AAAAW,YAAA,CAAAX,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}