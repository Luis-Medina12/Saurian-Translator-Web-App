{"ast":null,"code":"var _jsxFileName = \"/Users/luismedina/Desktop/projects/feature-testing/src/components/Translator.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Translator = originalText => {\n  const org = originalText.text;\n  if (org != null) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: englishToSaurian(org)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: saurianToEnglish(englishToSaurian(org))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n};\n// Will return saurian equivalent\n_c = Translator;\nlet hashedEng = new Map();\n\n// Will return english equivalent\nlet hashedSaur = new Map();\nconst ENGLISHARR = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '!', ' ', '.', '?', ',', '\\''];\nconst SAURIANARR = ['U', 'R', 'S', 'T', 'O', 'V', 'W', 'X', 'A', 'Z', 'B', 'C', 'M', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'I', 'L', 'N', 'P', 'O', 'Q', 'u', 'r', 's', 't', 'o', 'v', 'w', 'x', 'a', 'z', 'b', 'c', 'm', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'i', 'l', 'n', 'p', 'o', 'q', '!', ' ', '.', '?', ',', '\\''];\nlet i = 0;\nwhile (i < SAURIANARR.length) {\n  hashedEng.set(ENGLISHARR[i], SAURIANARR[i]);\n  hashedSaur.set(SAURIANARR[i], ENGLISHARR[i]);\n  i++;\n}\nconst englishToSaurian = original => {\n  const trans = original.split(\"\");\n  for (let i = 0; i < trans.length; i++) {\n    trans[i] = hashedEng.get(trans[i]);\n  }\n  return trans;\n};\nconst saurianToEnglish = original => {\n  const trans = original.split(\"\");\n  for (let i = 0; i < trans.length; i++) {\n    trans[i] = hashedSaur.get(trans[i]);\n  }\n  return trans;\n};\nexport default Translator;\nvar _c;\n$RefreshReg$(_c, \"Translator\");","map":{"version":3,"names":["Translator","originalText","org","text","_jsxDEV","_Fragment","children","englishToSaurian","fileName","_jsxFileName","lineNumber","columnNumber","saurianToEnglish","_c","hashedEng","Map","hashedSaur","ENGLISHARR","SAURIANARR","i","length","set","original","trans","split","get","$RefreshReg$"],"sources":["/Users/luismedina/Desktop/projects/feature-testing/src/components/Translator.jsx"],"sourcesContent":["\nconst Translator = (originalText) =>{\nconst org = originalText.text;\n    \nif(org!= null){\n    return(\n        <>\n            <p>{englishToSaurian(org)}</p>\n            <p>{saurianToEnglish(englishToSaurian(org))}</p>\n            </>\n    )\n        \n    }\n\n}\n// Will return saurian equivalent\nlet hashedEng = new Map();\n\n// Will return english equivalent\nlet hashedSaur = new Map();\n\nconst ENGLISHARR = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q',\n    'R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q',\n    'r','s','t','u','v','w','x','y','z','!', ' ','.','?',',','\\''];\n\nconst SAURIANARR = ['U','R','S','T','O','V','W','X','A','Z','B','C','M','D','E','F','G',\n    'H','J','K','I','L','N','P','O','Q','u','r','s','t','o','v','w','x','a','z','b','c','m','d','e','f','g',\n    'h','j','k','i','l','n','p','o','q','!', ' ','.','?',',','\\''];\n\nlet i =0;\nwhile(i< SAURIANARR.length){\n\n    hashedEng.set(ENGLISHARR[i],SAURIANARR[i]);\n    hashedSaur.set(SAURIANARR[i], ENGLISHARR[i]);\n    i++;\n}\n\nconst englishToSaurian = (original) =>{\n    const trans = original.split(\"\");\n    for(let i = 0; i<trans.length; i++){\n        trans[i] = hashedEng.get(trans[i]);\n    }\n\n    return trans;\n}\n\nconst saurianToEnglish = (original) =>{\n    const trans = original.split(\"\");\n    for(let i = 0; i<trans.length; i++){\n        trans[i] = hashedSaur.get(trans[i]);\n    }\n\n    return trans;\n}\n\nexport default Translator;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}